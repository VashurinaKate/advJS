(()=>{"use strict";var o={d:(t,e)=>{for(var a in e)o.o(e,a)&&!o.o(t,a)&&Object.defineProperty(t,a,{enumerable:!0,get:e[a]})},o:(o,t)=>Object.prototype.hasOwnProperty.call(o,t)};o.d({},{T:()=>t}),Vue.component("goods-list",{props:["goods"],template:'\n        <div class="goods-list">\n            <goods-item v-for="goodEntity in goods" :goodProp="goodEntity"></goods-item>\n            <p v-if="goods.length === 0">По Вашему запросу ничего не найдено</p>\n        </div>\n    '}),Vue.component("goods-item",{props:["goodProp"],methods:{async addToCart(o){(await fetch(`${t}/addToCart`,{method:"POST",mode:"cors",headers:{"Content-Type":"application/json;charset=utf-8"},body:JSON.stringify(this.goodProp)})).ok&&(o.target.innerText="Добавлено",o.target.style.background="#b96a4f");const e=Date();await fetch(`${t}/addStats`,{method:"POST",mode:"cors",headers:{"Content-Type":"application/json;charset=utf-8"},body:JSON.stringify({action:"добавление в корзину",addedCartItem:this.goodProp.product_name,time:e})})}},template:'\n        <div class="goods-item">\n            <a href="#" class="goods-imgLink"><img src="img/noImage.jpeg" class="goods-img" alt="product"></a>\n            <h3>{{goodProp.product_name}}</h3>\n            <p>{{goodProp.price}}</p>\n            <button type="button" class="addToCart" v-on:click="addToCart">В корзину</button>\n\n            <div class="holder">\n                <div class="smallLine smallLine1"></div>\n                <div class="smallLine smallLine2"></div>\n            </div>\n        </div>\n    '}),Vue.component("filter-goods",{data:()=>({searchLine:""}),methods:{filterGoodsItem:function(){this.$root.filterGoods(this.searchLine)}},template:'\n        <div class="searchForm">\n            <input type="text" class="goodsSearch" v-model="searchLine">\n            <button class="searchButton" v-on:click="filterGoodsItem">Искать</button>\n        </div>\n    '}),Vue.component("cart-goods",{props:["cartGoods"],computed:{calcTotalPrice:function(){let o=0;return this.cartGoods.forEach((t=>{o+=t.price})),o}},template:'\n        <div class="cart-list">\n            <cart-item v-for="cartGoodEntity in cartGoods" :cartGoodProp="cartGoodEntity"></cart-item>\n            <div v-if="cartGoods.length === 0">Ваша корзина пуста</div>\n\n            <div v-else style="display: flex;">\n                <p>Итого:</p><p class="emphasised">{{ calcTotalPrice }}</p>\n            </div>\n        </div>\n    '}),Vue.component("cart-item",{props:["cartGoodProp"],methods:{async removeFromCart(){await fetch(`${t}/removeFromCart`,{method:"DELETE",mode:"cors",headers:{"Content-Type":"application/json;charset=utf-8"},body:JSON.stringify(this.cartGoodProp)});const o=Date();await fetch(`${t}/addStats`,{method:"POST",mode:"cors",headers:{"Content-Type":"application/json;charset=utf-8"},body:JSON.stringify({action:"удаление из корзины",removedCartItem:this.cartGoodProp.product_name,time:o})})}},template:'\n        <div class="cart-item">\n            <a href="#" class="cart-imgLink"><img src="img/noImage.jpeg" class="cart-img" alt="product"></a>\n            <h3>{{cartGoodProp.product_name}}</h3>\n            <p>{{cartGoodProp.price}}</p>\n            <button class="removeFromCart" v-on:click="removeFromCart">Удалить</button>\n        </div>\n    '}),Vue.component("connection-error",{props:["is-connection-error"],template:'\n    <div class="error-wrap" v-show="isConnectionError">\n        <div class="error-modal">\n            <p>Ошибка при соединении с сервером</p>\n        </div>\n    </div>\n    '});const t="http://localhost:3000";new Vue({el:"#app",data:{goods:[],filteredGoods:[],cartGoods:[],isConnectionError:!1},methods:{async getProducts(){const o=await fetch(`${t}/catalogData`);if(o.ok){const t=await o.json();this.goods=t,this.filteredGoods=t}else this.isConnectionError=!0},async getCartGoods(){const o=await fetch(`${t}/cartData`);if(o.ok){const t=await o.json();this.cartGoods=t}else this.isConnectionError=!0},filterGoods(o){const t=new RegExp(o,"i");this.filteredGoods=this.goods.filter((o=>t.test(o.product_name)))}},async mounted(){await this.getProducts(),await this.getCartGoods()}})})();